version: 2.1

executors:
  py:
    parameters:
      pyver:
        type: string
        default: "3.11"
    docker:
      - image: cimg/python:<<parameters.pyver>>
    resource_class: small

commands:
  install-deps:
    steps:
      - checkout
      - run:
          name: Crear venv y actualizar pip
          command: |
            python -m venv .venv
            . .venv/bin/activate
            python -m pip install --upgrade pip
      - restore_cache:
          keys:
            - v1-pip-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
            - v1-pip-{{ checksum "requirements.txt" }}
            - v1-pip-
      - run:
          name: Instalar requirements
          command: |
            . .venv/bin/activate
            pip install -r requirements.txt
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - save_cache:
          key: v1-pip-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
          paths:
            - ~/.cache/pip
      - run:
          name: Mostrar versiones
          command: |
            . .venv/bin/activate
            python --version
            pip --version

jobs:
  lint:
    executor: { name: py, pyver: "3.11" }
    steps:
      - install-deps
      - run:
          name: Black (check) + isort (check)
          command: |
            . .venv/bin/activate
            black --check src tests
            isort --check-only src tests
      - run:
          name: flake8 + pylint (no bloqueantes temporalmente)
          command: |
            . .venv/bin/activate
            flake8 src tests || true
            pylint src || true

  pre_commit:
    executor: { name: py, pyver: "3.11" }
    steps:
      - install-deps
      - run:
          name: Ejecutar pre-commit (no bloqueante)
          command: |
            . .venv/bin/activate
            pre-commit run --all-files || true

  test:
    parameters:
      pyver: { type: string, default: "3.11" }
      skip_intentional_fails: { type: boolean, default: false }
    executor: { name: py, pyver: << parameters.pyver >> }
    steps:
      - install-deps
      - run:
          name: Pytest con coverage (m√≠n 90%)
          command: |
            . .venv/bin/activate
            mkdir -p test-results
            if [ "<< parameters.skip_intentional_fails >>" = "true" ]; then
              PYTEST_K='not test_create_valid_task and not test_update_title and not test_get_statistics_with_tasks'
            else
              PYTEST_K=''
            fi
            pytest -q --maxfail=1 --disable-warnings ${PYTEST_K:+-k "$PYTEST_K"} \
              --junitxml=test-results/junit.xml \
              --cov=src --cov-report=term-missing --cov-report=xml --cov-report=html
            python -c "import sys, xml.etree.ElementTree as ET; r=float(ET.parse('coverage.xml').getroot().get('line-rate','0'))*100; print(f'Coverage: {r:.2f}%'); sys.exit(0 if r>=90.0 else 1)"
      - store_test_results: { path: test-results }
      - store_artifacts: { path: htmlcov, destination: coverage-html }
      - store_artifacts: { path: coverage.xml, destination: coverage.xml }

  package:
    executor: { name: py, pyver: "3.11" }
    steps:
      - install-deps
      - run:
          name: Build (wheel + sdist)
          command: |
            . .venv/bin/activate
            python -m pip install build
            python -m build
      - store_artifacts: { path: dist, destination: dist }

workflows:
  pr_checks:
    jobs:
      - lint
      - pre_commit:
          requires: [lint]

      # ---- main (VERDE): excluye fallos intencionales ----
      - test:
          name: test-3_10-main
          pyver: "3.10"
          skip_intentional_fails: true
          filters: { branches: { only: main } }
      - test:
          name: test-3_11-main
          pyver: "3.11"
          skip_intentional_fails: true
          filters: { branches: { only: main } }
      - package:
          name: package-main
          requires: [test-3_10-main, test-3_11-main]
          filters: { branches: { only: main } }

      # ---- enable (ROJO): incluye fallos intencionales ----
      - test:
          name: test-3_10-enable
          pyver: "3.10"
          skip_intentional_fails: false
          filters: { branches: { only: enable } }
      - test:
          name: test-3_11-enable
          pyver: "3.11"
          skip_intentional_fails: false
          filters: { branches: { only: enable } }
      - package:
          name: package-enable
          requires: [test-3_10-enable, test-3_11-enable]
          filters: { branches: { only: enable } }

  nightly:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters: { branches: { only: [main, enable] } }
    jobs:
      - test:
          name: test-3_11-nightly-main
          pyver: "3.11"
          skip_intentional_fails: true
          filters: { branches: { only: main } }
      - test:
          name: test-3_11-nightly-enable
          pyver: "3.11"
          skip_intentional_fails: false
          filters: { branches: { only: enable } }

  release_on_tag:
    jobs:
      - package:
          filters:
            tags: { only: /^v\d+\.\d+\.\d+$/ }
            branches: { ignore: /.*/ }
